{"version":3,"sources":["components/Header.js","components/GoogleMaps.js","components/SearchBar.js","components/ErrorMessages.js","components/City.js","components/Today.js","components/Forecast.js","Utils.js","WeatherService.js","Mapper.js","components/Weather.js","Theme.js","App.js","serviceWorker.js","index.js"],"names":["Header","Grid","container","spacing","alignItems","item","color","fontSize","Typography","variant","noWrap","autocompleteService","current","useStyles","makeStyles","theme","icon","palette","text","secondary","marginRight","GoogleMaps","googleKey","setCity","search","classes","React","useState","value","setValue","inputValue","setInputValue","options","setOptions","loaded","useRef","window","document","querySelector","src","position","id","script","createElement","setAttribute","appendChild","loadScript","fetch","useMemo","throttle","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","input","results","newOptions","Autocomplete","style","width","getOptionLabel","option","description","filterOptions","x","autoComplete","includeInputInList","freeSolo","selectOnFocus","filterSelectedOptions","onChange","event","newValue","onInputChange","newInputValue","renderInput","params","TextField","label","fullWidth","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","map","match","offset","length","className","xs","part","index","key","fontWeight","highlight","secondary_text","SearchBar","units","setUnits","invalid","city","doSearch","select","target","MenuItem","IconButton","aria-label","onClick","ErrorMessages","open","setOpen","Collapse","in","Alert","severity","onClose","City","Card","CardContent","name","country","Number","population","toLocaleString","Button","href","googleUrl","underline","rel","wikiUrl","Today","today","alt","temperature","unitIndicator","sunrise","sunset","min","max","wind","humidity","Forecast","forecast","utilsGetFormattedTime","unixTimeStamp","date","Date","hours","getHours","minutes","getMinutes","WeatherService","unit","apiKey","lang","this","baseApiUrl","args","endpointForecast","endPointToday","Object","assign","appid","axios","all","get","then","spread","forecastReponse","todayReponse","forecastData","data","todayData","mapped","weather","charAt","toUpperCase","slice","main","temp_min","toFixed","temp_max","temp","speed","sys","forecasts","list","tomorrow","fourDates","tomorrow_formated","i","setDate","getDate","getFullYear","getMonth","push","daysData","Weather","error401","setError401","setToday","setForecast","citySearch","weatherService","q","promise","getForecast","catch","error","response","status","Theme","createMuiTheme","type","typography","button","textTransform","backgroundColor","h6","overrides","MuiPaper","root","elevation1","elevation8","MuiSvgIcon","colorPrimary","MuiFormLabel","MuiInput","MuiInputLabel","MuiSelect","MuiAutocomplete","listbox","responsiveFontSizes","App","ThemeProvider","Container","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.e5de4a1d.chunk.js","sourcesContent":["import React from \"react\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Header = () => {\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item>\n        <CloudIcon color=\"primary\" fontSize=\"large\" />\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h6\" noWrap>\n          Weather Forecast\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function GoogleMaps({ googleKey, setCity, search }) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== \"undefined\" && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\n        \"https://maps.googleapis.com/maps/api/js?key=\" +\n          googleKey +\n          \"&libraries=places\",\n        document.querySelector(\"head\"),\n        \"google-maps\"\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      style={{ width: 300 }}\n      getOptionLabel={(option) =>\n        typeof option === \"string\" ? option : option.description\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      freeSolo\n      selectOnFocus\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n\n        if (newValue != null) {\n          search(newValue.description);\n        }\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n        setCity(newInputValue);\n      }}\n      renderInput={(params) => (\n\n        <TextField\n          {...params}\n          label=\"Enter City...\"\n          variant=\"outlined\"\n          fullWidth\n        />\n      )}\n      renderOption={(option) => {\n        const matches =\n          option.structured_formatting.main_text_matched_substrings;\n        const parts = parse(\n          option.structured_formatting.main_text,\n          matches.map((match) => [match.offset, match.offset + match.length])\n        );\n\n        return (\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <LocationOnIcon className={classes.icon} color=\"primary\" />\n            </Grid>\n            <Grid item xs>\n              {parts.map((part, index) => (\n                <span\n                  key={index}\n                  style={{ fontWeight: part.highlight ? 700 : 400 }}\n                >\n                  {part.text}\n                </span>\n              ))}\n\n              <Typography>\n                {option.structured_formatting.secondary_text}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nimport Header from \"./Header\";\nimport GoogleMaps from \"./GoogleMaps\";\n\nconst SearchBar = ({ googleKey, units, setUnits, search, invalid }) => {\n  const [city, setCity] = useState(\"\");\n\n  const handleUnitsChange = (event) => {\n    setUnits(event.target.value);\n  };\n\n  const handleSearch = (event) => {\n    doSearch();\n  };\n\n  const doSearch = () => {\n    search(city);\n  };\n\n  return (\n    <div>\n      <Header />\n      <Grid container spacing={2} alignItems=\"flex-end\">\n        <Grid>\n          <GoogleMaps googleKey={googleKey} setCity={setCity} search={search}/>\n        </Grid>\n        <Grid item>\n          <TextField select value={units} onChange={handleUnitsChange}>\n            <MenuItem key=\"metric\" value=\"metric\">\n              Celsius\n            </MenuItem>\n            <MenuItem key=\"imperial\" value=\"imperial\">\n              Farenheit\n            </MenuItem>\n          </TextField>\n        </Grid>\n        <Grid item>\n          <IconButton aria-label=\"search\" onClick={handleSearch}>\n            <SearchIcon color=\"primary\" fontSize=\"large\" />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst ErrorMessages = () => {\n  const [open, setOpen] = React.useState(true);\n\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item>\n        <Collapse in={open}>\n          <Alert\n            severity=\"error\"\n            onClose={() => {\n              setOpen(false);\n            }}\n          >\n            Please specify a valid API key\n          </Alert>\n        </Collapse>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ErrorMessages;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport LocationCityIcon from \"@material-ui/icons/LocationCity\";\n\nconst City = ({ city }) => {\n  return (\n    <Card>\n      <CardContent>\n        <Grid container spacing={2} alignItems=\"flex-end\">\n          <Grid item>\n            <LocationCityIcon style={{ fontSize: 100 }} />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h2\" noWrap>\n              {city.name}\n            </Typography>\n            <Typography variant=\"h6\" noWrap>\n              {city.country}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2} alignItems=\"flex-end\">\n          <Grid item>\n            <Typography variant=\"h6\" noWrap>\n              population {Number(city.population).toLocaleString()}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"outlined\"\n              href={city.googleUrl}\n              underline=\"always\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              map\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"outlined\"\n              href={city.wikiUrl}\n              underline=\"always\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              wiki\n            </Button>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default City;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Today = ({ today }) => {\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h4\">Today</Typography>\n        <img src={today.icon} alt=\"weather icon\"></img>\n        <Typography variant=\"h2\">\n          {today.temperature.current}°{today.unitIndicator}\n        </Typography>\n        <Typography variant=\"h4\">{today.description}</Typography>\n        <Typography variant=\"h6\">\n          Sunrise {today.sunrise} Sunset {today.sunset}\n        </Typography>\n        <Typography variant=\"h6\">\n          Min {today.temperature.min}°{today.unitIndicator} Max{\" \"}\n          {today.temperature.max}°{today.unitIndicator}\n        </Typography>\n        <Typography variant=\"h6\">Wind {today.wind} km/h</Typography>\n        <Typography variant=\"h6\">Humidity {today.humidity}%</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Today;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Forecast = ({ forecast }) => {\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h4\">Forecasr</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Forecast;\n","export function utilsGetIcon(icon) {\n  return `http://openweathermap.org/img/wn/${icon}@2x.png `;\n}\n\nexport function utilsGetFormattedTime(unixTimeStamp) {\n  const date = new Date(unixTimeStamp * 1000);\n\n  let hours = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\n  let minutes =\n    date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n\n  return `${hours}:${minutes}`;\n}\n\nexport function utilsCapitalizeText(text) {\n  if (text === null) {\n    return \"\";\n  }\n  return text.replace(/\\w\\S*/g, (w) =>\n    w.replace(/^\\w/, (c) => c.toUpperCase())\n  );\n}\n\nexport function utilsCapitalizeFirstLetter(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\nexport function utilsGetUnitsIndicator(units) {\n  if (units === \"imperial\") {\n    return \"F\";\n  }\n\n  return \"C\";\n}\n","import axios from \"axios\";\nimport { map } from \"./Mapper\";\n\nclass WeatherService {\n  constructor(unit, apiKey, lang) {\n    this.unit = unit;\n    this.apiKey = apiKey;\n    this.baseApiUrl = \"//api.openweathermap.org/data/2.5\";\n    this.lang = lang;\n  }\n  getForecast(args) {\n    const endpointForecast = this.baseApiUrl + \"/forecast\";\n    const endPointToday = this.baseApiUrl + \"/weather\";\n    const params = Object.assign(\n      {\n        appid: this.apiKey,\n        lang: this.lang,\n        unit: this.unit,\n      },\n      args\n    );\n\n    const promise = axios\n      .all([\n        axios.get(endpointForecast, { params }),\n        axios.get(endPointToday, { params }),\n      ])\n      .then(\n        axios.spread((forecastReponse, todayReponse) => {\n          const forecastData = forecastReponse.data;\n          const todayData = todayReponse.data;\n\n          if (forecastData && todayData) {\n            return map(forecastData, todayData, this.unit);\n          }\n          return {};\n        })\n      );\n\n    return promise;\n  }\n\n  getNextDays(tomorrow) {\n    // Returns an array containing the next 4 days dates in format yyyy-mm-dd\n\n    var fourDates = [];\n    //var tomorrow = new Date(); // initialized at today\n    var tomorrow_formated = \"\";\n\n    // Creating the 4 dates in the good format\n    for (var i = 0; i < 4; i++) {\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      tomorrow_formated =\n        tomorrow.getFullYear() +\n        \"-\" +\n        (\"0\" + tomorrow.getMonth() + 1).slice(-2) +\n        \"-\" +\n        (\"0\" + tomorrow.getDate()).slice(-2);\n      fourDates.push(tomorrow_formated);\n    }\n\n    return fourDates;\n  }\n\n  mapForecast(daysData) {\n    var daysMapped = [];\n\n    /*var comingDays = this.getNextDays(new Date());\n\n    // Getting data from each day\n    for (var i=0; i<4; i++) {\n\n      var dayDataFiltered = daysData.filter(item => item.dt_txt.includes(comingDays[i]));  //7 or 8 data objects represnting a day\n      var dayMapped = {};\n\n      ////dayMapped.dayOfWeek = this.getDayOfWeek(dayDataFiltered[0].dt );  \n\n      dayMapped.temperature = {};\n      dayMapped.temperature.min = Math.min.apply(Math, dayDataFiltered.map(function(el) { return el.main.temp_min;})).toFixed(0);\n      dayMapped.temperature.max = Math.max.apply(Math, dayDataFiltered.map(function(el) { return el.main.temp_max;})).toFixed(0);\n      \n      // Taking the middle of the day as reference\n      ///dayMapped.description = dayDataFiltered[dayDataFiltered.length/2].weather[0].description;\n      ///dayMapped.icon = this.getIcon(dayDataFiltered[dayDataFiltered.length/2].weather[0].icon);\n\n      daysMapped.push(dayMapped);\n    }*/\n\n    return daysMapped;\n  }\n}\n\nexport default WeatherService;\n","import {\n  utilsGetIcon,\n  utilsGetFormattedTime,\n  utilsCapitalizeFirstLetter,\n  utilsGetUnitsIndicator,\n} from \"./Utils\";\n\nexport function map(forecastData, todayData, unit) {\n  const mapped = {};\n\n  mapped.city = forecastData.city;\n  mapped.city.googleUrl =\n    \"https://www.google.co.uk/maps/place/\" + forecastData.city.name;\n  mapped.city.wikiUrl =\n    \"https://en.wikipedia.org/wiki/\" + forecastData.city.name;\n  mapped.today = {\n    description: utilsCapitalizeFirstLetter(todayData.weather[0].description),\n    icon: utilsGetIcon(todayData.weather[0].icon),\n    temperature: {\n      min: todayData.main.temp_min.toFixed(0),\n      max: todayData.main.temp_max.toFixed(0),\n      current: todayData.main.temp.toFixed(0),\n    },\n    wind: todayData.wind.speed.toFixed(0),\n    humidity: todayData.main.humidity,\n    sunrise: utilsGetFormattedTime(todayData.sys.sunrise),\n    sunset: utilsGetFormattedTime(todayData.sys.sunset),\n    unitIndicator: utilsGetUnitsIndicator(unit),\n    unit: unit,\n  };\n\n  mapped.forecasts = forecastData.list;\n\n  return mapped;\n}\n","import React, { useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport ErrorMessages from \"./ErrorMessages\";\nimport City from \"./City\";\nimport Today from \"./Today\";\nimport Forecast from \"./Forecast\";\nimport WeatherService from \"../WeatherService\";\n\nconst Weather = ({ apiKey }) => {\n  const [error401, setError401] = useState(false);\n  const [units, setUnits] = useState(\"metric\");\n  const [city, setCity] = useState(null);\n  const [today, setToday] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  /// google key is protected in the google console to asudbury websites\n  const [googleKey] = useState(\"AIzaSyBQJ5nuBEu18372atNGIXPVPEMmske2CQM\");\n\n  const search = (citySearch) => {\n    if (citySearch && citySearch.length > 2) {\n      const weatherService = new WeatherService(units, apiKey, \"en\");\n\n      const params = { q: citySearch, units: units };\n\n      let promise = weatherService.getForecast(params);\n\n      promise.then((data) => {\n        if (typeof data != \"undefined\") {\n          setCity(data.city);\n          setToday(data.today);\n          setForecast(data.forecast);\n        }\n      });\n\n      promise.catch((error) => {\n        if (error.response.status === 401) {\n          setError401(true);\n        }\n\n        setCity(null);\n        setToday(null);\n        setForecast(null);\n      });\n    }\n  };\n\n  return (\n    <div>\n      <SearchBar\n        units={units}\n        setUnits={setUnits}\n        search={search}\n        googleKey={googleKey}\n      ></SearchBar>\n\n      {error401 && <ErrorMessages />}\n\n      {city && <City city={city} />}\n\n      {today && <Today today={today} />}\n\n      {forecast && <Forecast forecast={forecast} />}\n    </div>\n  );\n};\n\nexport default Weather;\n","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\n\nlet Theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n  typography: {\n    button: {\n      textTransform: \"none\",\n      backgroundColor: \"blue\",\n    },\n    h6: {\n      color: \"white\",\n    },\n  },\n  overrides: {\n    MuiPaper: {\n      root: {\n        backgroundColor: \"transparent\",\n      },\n      elevation1: {\n        ///boxShadow: \"none\",\n      },\n      elevation8: {\n        backgroundColor: \"blue\",\n      },\n    },\n    MuiSvgIcon: {\n      colorPrimary: {\n        color: \"white\",\n      },\n    },\n    MuiFormLabel: {\n      root: {\n        color: \"white\",\n        \"&$focused\": {\n          color: \"white\",\n          fontWeight: \"bold\"\n        }\n      },\n    },\n    MuiInput: {\n      root: {\n        color: \"white\",\n      },\n    },\n    MuiInputLabel: {\n      root: {\n        color: \"white\",\n      },\n    },\n    MuiSelect: {\n      icon: {\n        color: \"white\",\n      },\n    },\n    MuiAutocomplete: {\n      listbox: {\n        backgroundColor: \"blue\",\n      },\n    },\n  },\n});\n\nTheme = responsiveFontSizes(Theme);\n\nexport default Theme;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Weather from \"./components/Weather\";\n\nimport Theme from \"./Theme.js\";\n\nimport \"./App.css\";\n\nconst App = () => (\n  <ThemeProvider theme={Theme}>\n    <Container className=\"container\">\n      <Weather apiKey={\"5ce07d841919bc82dcccf2f3c310c2eb\"} />\n    </Container>\n  </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}