{"version":3,"sources":["components/Header.js","components/GoogleMaps.js","components/SearchBar.js","components/ErrorMessage.js","components/City.js","components/Now.js","components/Forecasts.js","Utils.js","Mapper.js","WeatherService.js","components/Weather.js","Theme.js","App.js","serviceWorker.js","index.js"],"names":["Header","Grid","container","spacing","alignItems","item","color","fontSize","Typography","variant","noWrap","autocompleteService","current","useStyles","makeStyles","theme","icon","palette","text","secondary","marginRight","GoogleMaps","googleKey","setCity","citySearch","classes","React","useState","value","setValue","inputValue","setInputValue","options","setOptions","loaded","useRef","window","document","querySelector","src","position","id","script","createElement","setAttribute","appendChild","loadScript","fetch","useMemo","throttle","request","callback","getPlacePredictions","onKeyPress","evt","key","useEffect","active","google","maps","places","AutocompleteService","input","results","newOptions","Autocomplete","style","width","getOptionLabel","option","description","filterOptions","x","autoComplete","includeInputInList","freeSolo","selectOnFocus","filterSelectedOptions","onChange","event","newValue","onInputChange","newInputValue","renderInput","params","TextField","label","fullWidth","renderOption","parts","matches","structured_formatting","main_text_matched_substrings","parse","main_text","map","match","offset","length","className","xs","part","index","fontWeight","highlight","secondary_text","SearchBar","units","setUnits","coordinatesSearch","city","doSearch","Card","CardContent","direction","Button","onClick","select","target","MenuItem","IconButton","aria-label","ErrorMessage","props","open","setOpen","Collapse","in","Alert","severity","onClose","errorMessage","City","name","country","undefined","population","Number","toLocaleString","href","googleUrl","underline","rel","wikiUrl","Now","now","alt","temperature","unitIndicator","sunrise","sunset","min","max","wind","humidity","Forecasts","forecasts","forecast","i","align","day","time","utilsGetIcon","utilsGetDayOfWeek","unixTimeStamp","Date","getDay","utilsGetFormattedTime","date","hours","getHours","minutes","getMinutes","utilsCapitalizeFirstLetter","charAt","toUpperCase","slice","forecastData","todayData","unit","mapped","weather","main","temp_min","toFixed","temp_max","temp","speed","sys","arrayLength","dt","push","mapForecasts","list","WeatherService","apiKey","lang","this","baseApiUrl","args","endpointForecast","endPointToday","Object","assign","appid","axios","all","get","then","spread","forecastReponse","todayReponse","data","Weather","setErrorMessage","setNow","setForecasts","coordinatesSearchSuccess","lat","coords","latitude","lon","longitude","coordinatesSearchError","error","message","promise","getForecast","catch","response","status","console","log","q","navigator","geolocation","getCurrentPosition","Theme","createMuiTheme","type","typography","button","textTransform","backgroundColor","h6","overrides","MuiPaper","root","elevation1","elevation8","MuiSvgIcon","colorPrimary","MuiFormLabel","MuiInput","MuiInputLabel","MuiSelect","MuiAutocomplete","listbox","responsiveFontSizes","App","ThemeProvider","Container","Boolean","location","hostname","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13014638.chunk.js","sourcesContent":["import React from \"react\";\nimport CloudIcon from \"@material-ui/icons/Cloud\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst Header = () => {\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item>\n        <CloudIcon color=\"primary\" fontSize=\"large\" />\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h6\" noWrap>\n          Weather Forecast\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n}));\n\nexport default function GoogleMaps({ googleKey, setCity, citySearch }) {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(null);\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== \"undefined\" && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\n        \"https://maps.googleapis.com/maps/api/js?key=\" +\n          googleKey +\n          \"&libraries=places\",\n        document.querySelector(\"head\"),\n        \"google-maps\"\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  const onKeyPress = (evt) => {\n    if (evt.key === \"Enter\") {\n      citySearch(value);\n    }\n  };\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions(value ? [value] : []);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        let newOptions = [];\n\n        if (value) {\n          newOptions = [value];\n        }\n\n        if (results) {\n          newOptions = [...newOptions, ...results];\n        }\n\n        setOptions(newOptions);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [value, inputValue, fetch]);\n\n  return (\n    <Autocomplete\n      style={{ width: 300 }}\n      getOptionLabel={(option) =>\n        typeof option === \"string\" ? option : option.description\n      }\n      filterOptions={(x) => x}\n      options={options}\n      autoComplete\n      includeInputInList\n      freeSolo\n      selectOnFocus\n      filterSelectedOptions\n      value={value}\n      onChange={(event, newValue) => {\n        setOptions(newValue ? [newValue, ...options] : options);\n        setValue(newValue);\n\n        if (newValue != null) {\n          citySearch(newValue.description);\n        }\n      }}\n      onInputChange={(event, newInputValue) => {\n        setInputValue(newInputValue);\n        setCity(newInputValue);\n      }}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          onKeyPress={onKeyPress}\n          label=\"Enter City...\"\n          variant=\"outlined\"\n          fullWidth\n        />\n      )}\n      renderOption={(option) => {\n        let parts = null;\n\n        if (option != null) {\n          const matches =\n            option.structured_formatting.main_text_matched_substrings;\n            parts = parse(\n            option.structured_formatting.main_text,\n            matches.map((match) => [match.offset, match.offset + match.length])\n          );\n        }\n\n        return (\n          <Grid container alignItems=\"center\">\n            <Grid item>\n              <LocationOnIcon className={classes.icon} color=\"primary\" />\n            </Grid>\n            <Grid item xs>\n              {parts.map((part, index) => (\n                <span\n                  key={index}\n                  style={{ fontWeight: part.highlight ? 700 : 400 }}\n                >\n                  {part.text}\n                </span>\n              ))}\n\n              <Typography>\n                {option.structured_formatting.secondary_text}\n              </Typography>\n            </Grid>\n          </Grid>\n        );\n      }}\n    />\n  );\n}\n","import React, { useState } from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nimport Header from \"./Header\";\nimport GoogleMaps from \"./GoogleMaps\";\n\nconst SearchBar = ({\n  googleKey,\n  units,\n  setUnits,\n  citySearch,\n  coordinatesSearch\n}) => {\n  const [city, setCity] = useState(\"\");\n\n  const handleUnitsChange = (event) => {\n    setUnits(event.target.value);\n  };\n\n  const handleSearch = (event) => {\n    doSearch();\n  };\n\n  const doSearch = () => {\n    citySearch(city);\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Header />\n        <Grid container spacing={2}>\n          <Grid item>\n            <Grid container direction=\"column\" spacing={2}>\n              <Grid item>\n                <GoogleMaps\n                  googleKey={googleKey}\n                  setCity={setCity}\n                  citySearch={citySearch}\n                />\n              </Grid>\n              <Grid item>\n                <Button variant=\"outlined\" onClick={coordinatesSearch}>\n                  Use my current location\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item>\n            <TextField select value={units} onChange={handleUnitsChange}>\n              <MenuItem key=\"metric\" value=\"metric\">\n                Celsius\n              </MenuItem>\n              <MenuItem key=\"imperial\" value=\"imperial\">\n                Farenheit\n              </MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item>\n            <IconButton aria-label=\"search\" onClick={handleSearch}>\n              <SearchIcon color=\"primary\" fontSize=\"large\" />\n            </IconButton>\n          </Grid>\n        </Grid>\n        <Grid item></Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst ErrorMessage = (props) => {\n  const [open, setOpen] = React.useState(true);\n\n  return (\n    <Grid container spacing={2} alignItems=\"flex-end\">\n      <Grid item>\n        <Collapse in={open}>\n          <Alert\n            severity=\"error\"\n            onClose={() => {\n              setOpen(false);\n            }}\n          >\n            {props.errorMessage}\n          </Alert>\n        </Collapse>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport LocationCityIcon from \"@material-ui/icons/LocationCity\";\n\nconst City = ({ city }) => {\n  return (\n    <Card>\n      <CardContent>\n        <Grid container spacing={2} alignItems=\"flex-end\">\n          <Grid item>\n            <LocationCityIcon style={{ fontSize: 100 }} />\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h2\" noWrap>\n              {city.name}\n            </Typography>\n            <Typography variant=\"h6\" noWrap>\n              {city.country}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2} alignItems=\"flex-end\">\n          <Grid item>\n            {city.population !== undefined && (\n              <Typography variant=\"h6\" noWrap>\n                population {Number(city.population).toLocaleString()}\n              </Typography>\n            )}\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"outlined\"\n              href={city.googleUrl}\n              underline=\"always\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              map\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"outlined\"\n              href={city.wikiUrl}\n              underline=\"always\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              wiki\n            </Button>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default City;\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Now = ({ now }) => {\n  return (\n    <Card>\n      <CardContent>\n        <img src={now.icon} alt=\"weather icon\"></img>\n        <Typography variant=\"h2\">\n          {now.temperature.current}°{now.unitIndicator}\n        </Typography>\n        <Typography variant=\"h4\">{now.description}</Typography>\n        <Typography variant=\"h6\">\n          Sunrise {now.sunrise} Sunset {now.sunset}\n        </Typography>\n        <Typography variant=\"h6\">\n          Min {now.temperature.min}°{now.unitIndicator} Max{\" \"}\n          {now.temperature.max}°{now.unitIndicator}\n        </Typography>\n        <Typography variant=\"h6\">Wind {now.wind} km/h</Typography>\n        <Typography variant=\"h6\">Humidity {now.humidity}%</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Now;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Forecasts = ({ forecasts }) => {\n  return (\n    <Grid container spacing={2}>\n      {forecasts.map((forecast, i) => (\n        <Grid item key={i}>\n          <Card variant=\"outlined\">\n            <CardContent>\n              <Typography variant=\"h6\" align=\"center\">\n                {forecast.day} {forecast.time}\n              </Typography>\n              <Typography variant=\"h6\" align=\"center\">\n                <img src={forecast.icon} alt=\"weather icon\"></img>\n              </Typography>\n              <Typography variant=\"h4\" align=\"center\">\n                {forecast.temperature}°{}\n              </Typography>\n              <Typography variant=\"h6\" align=\"center\">\n                {forecast.description}\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default Forecasts;\n","export function utilsGetIcon(icon) {\n  return `https://openweathermap.org/img/wn/${icon}@2x.png `;\n}\n\nexport function utilsGetDayOfWeek(unixTimeStamp) {\n  const date = new Date(unixTimeStamp * 1000);\n\n  var weekdays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\n  var day = date.getDay();\n\n  if (day === new Date().getDay()) {\n    return \"Today\";\n  }\n\n  return weekdays[day];\n}\n\nexport function utilsGetFormattedTime(unixTimeStamp) {\n  const date = new Date(unixTimeStamp * 1000);\n\n  let hours = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\n  let minutes =\n    date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n\n  return `${hours}:${minutes}`;\n}\n\nexport function utilsCapitalizeText(text) {\n  if (text === null) {\n    return \"\";\n  }\n  return text.replace(/\\w\\S*/g, (w) =>\n    w.replace(/^\\w/, (c) => c.toUpperCase())\n  );\n}\n\nexport function utilsCapitalizeFirstLetter(text) {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n}\n\nexport function utilsGetUnitsIndicator(units) {\n  if (units === \"imperial\") {\n    return \"F\";\n  }\n\n  return \"C\";\n}\n","import {\n  utilsGetIcon,\n  utilsGetDayOfWeek,\n  utilsGetFormattedTime,\n  utilsCapitalizeFirstLetter,\n  utilsGetUnitsIndicator,\n} from \"./Utils\";\n\nexport function map(forecastData, todayData, unit) {\n  const mapped = {};\n\n  mapped.city = forecastData.city;\n  mapped.city.googleUrl =\n    \"https://www.google.co.uk/maps/place/\" + forecastData.city.name;\n  mapped.city.wikiUrl =\n    \"https://en.wikipedia.org/wiki/\" + forecastData.city.name;\n  mapped.now = {\n    description: utilsCapitalizeFirstLetter(todayData.weather[0].description),\n    icon: utilsGetIcon(todayData.weather[0].icon),\n    temperature: {\n      min: todayData.main.temp_min.toFixed(0),\n      max: todayData.main.temp_max.toFixed(0),\n      current: todayData.main.temp.toFixed(0),\n    },\n    wind: todayData.wind.speed.toFixed(0),\n    humidity: todayData.main.humidity,\n    sunrise: utilsGetFormattedTime(todayData.sys.sunrise),\n    sunset: utilsGetFormattedTime(todayData.sys.sunset),\n    unitIndicator: utilsGetUnitsIndicator(unit),\n    unit: unit,\n  };\n\n  mapped.forecasts = mapForecasts(forecastData.list);\n\n  return mapped;\n}\n\nfunction mapForecasts(forecastData) {\n  var forecasts = [];\n\n  var arrayLength = forecastData.length;\n\n  for (var i = 0; i < arrayLength; i++) {\n    var forecast = {};\n\n    forecast.day = utilsGetDayOfWeek(forecastData[i].dt);\n    forecast.time = utilsGetFormattedTime(forecastData[i].dt);\n    forecast.temperature = forecastData[i].main.temp.toFixed(0);\n    forecast.description = utilsCapitalizeFirstLetter(\n      forecastData[i].weather[0].description\n    );\n    forecast.icon = utilsGetIcon(forecastData[i].weather[0].icon);\n\n    forecasts.push(forecast);\n  }\n\n  return forecasts;\n}\n","import axios from \"axios\";\nimport { map } from \"./Mapper\";\n\nclass WeatherService {\n  constructor(unit, apiKey, lang) {\n    this.unit = unit;\n    this.apiKey = apiKey;\n    this.baseApiUrl = \"//api.openweathermap.org/data/2.5\";\n    this.lang = lang;\n  }\n  getForecast(args) {\n    const endpointForecast = this.baseApiUrl + \"/forecast\";\n    const endPointToday = this.baseApiUrl + \"/weather\";\n    const params = Object.assign(\n      {\n        appid: this.apiKey,\n        lang: this.lang,\n        unit: this.unit,\n      },\n      args\n    );\n\n    const promise = axios\n      .all([\n        axios.get(endpointForecast, { params }),\n        axios.get(endPointToday, { params }),\n      ])\n      .then(\n        axios.spread((forecastReponse, todayReponse) => {\n          const forecastData = forecastReponse.data;\n          const todayData = todayReponse.data;\n\n          if (forecastData && todayData) {\n            return map(forecastData, todayData, this.unit);\n          }\n          return {};\n        })\n      );\n\n    return promise;\n  }\n}\n\nexport default WeatherService;\n","import React, { useState } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport ErrorMessage from \"./ErrorMessage\";\nimport City from \"./City\";\nimport Now from \"./Now\";\nimport Forecasts from \"./Forecasts\";\nimport WeatherService from \"../WeatherService\";\n\nconst Weather = ({ apiKey }) => {\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [units, setUnits] = useState(\"metric\");\n  const [city, setCity] = useState(null);\n  const [now, setNow] = useState(null);\n  const [forecasts, setForecasts] = useState(null);\n\n  /// google key is protected in the google console to asudbury websites\n  const [googleKey] = useState(\"AIzaSyBQJ5nuBEu18372atNGIXPVPEMmske2CQM\");\n\n  const citySearch = (citySearch) => {\n    console.log(\"citySearch=\" + citySearch);\n\n    if (citySearch && citySearch.length > 2) {\n      const params = { q: citySearch, units: units };\n\n      doSearch(params);\n    }\n  };\n\n  const coordinatesSearchSuccess = (position) => {\n    const params = {\n      lat: position.coords.latitude,\n      lon: position.coords.longitude,\n      units: units,\n    };\n    doSearch(params);\n  };\n\n  function coordinatesSearchError(error) {\n    setErrorMessage(error.message);\n  }\n\n  const coordinatesSearch = () => {\n    navigator.geolocation.getCurrentPosition(\n      coordinatesSearchSuccess,\n      coordinatesSearchError\n    );\n  };\n\n  const doSearch = (params) => {\n    setErrorMessage(\"\");\n\n    const weatherService = new WeatherService(units, apiKey, \"en\");\n\n    let promise = weatherService.getForecast(params);\n\n    promise.then((data) => {\n      if (typeof data != \"undefined\") {\n        setCity(data.city);\n        setNow(data.now);\n\n        setForecasts(data.forecasts);\n      }\n    });\n\n    promise.catch((error) => {\n      if (error.response.status === 401) {\n        setErrorMessage(\"API key not valid\");\n      } else if (error.response.status === 404) {\n        setErrorMessage(\"Location not found\");\n      } else {\n        setErrorMessage(\"An error has occured\");\n      }\n\n      setCity(null);\n      setNow(null);\n      setForecasts(null);\n    });\n  };\n\n  return (\n    <div>\n      <SearchBar\n        units={units}\n        setUnits={setUnits}\n        citySearch={citySearch}\n        coordinatesSearch={coordinatesSearch}\n        googleKey={googleKey}\n      ></SearchBar>\n\n      {errorMessage && <ErrorMessage errorMessage={errorMessage} />}\n\n      {city && <City city={city} />}\n\n      {now && <Now now={now} />}\n\n      {forecasts && <Forecasts forecasts={forecasts} />}\n    </div>\n  );\n};\n\nexport default Weather;\n","import { createMuiTheme, responsiveFontSizes } from \"@material-ui/core/styles\";\n\nlet Theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n  },\n  typography: {\n    button: {\n      textTransform: \"none\",\n      backgroundColor: \"blue\",\n    },\n    h6: {\n      color: \"white\",\n    },\n  },\n  overrides: {\n    MuiPaper: {\n      root: {\n        backgroundColor: \"transparent\",\n      },\n      elevation1: {\n        ///boxShadow: \"none\",\n      },\n      elevation8: {\n        backgroundColor: \"blue\",\n      },\n    },\n    MuiSvgIcon: {\n      colorPrimary: {\n        color: \"white\",\n      },\n    },\n    MuiFormLabel: {\n      root: {\n        color: \"white\",\n        \"&$focused\": {\n          color: \"white\",\n          fontWeight: \"bold\"\n        }\n      },\n    },\n    MuiInput: {\n      root: {\n        color: \"white\",\n      },\n    },\n    MuiInputLabel: {\n      root: {\n        color: \"white\",\n      },\n    },\n    MuiSelect: {\n      icon: {\n        color: \"white\",\n      },\n    },\n    MuiAutocomplete: {\n      listbox: {\n        backgroundColor: \"blue\",\n      },\n    },\n  },\n});\n\nTheme = responsiveFontSizes(Theme);\n\nexport default Theme;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Weather from \"./components/Weather\";\n\nimport Theme from \"./Theme.js\";\n\nimport \"./App.css\";\n\nconst App = () => (\n  <ThemeProvider theme={Theme}>\n    <Container className=\"container\">\n      <Weather apiKey={\"5ce07d841919bc82dcccf2f3c310c2eb\"} />\n    </Container>\n  </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}